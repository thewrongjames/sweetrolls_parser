S = expression, {',' expression};
expression = binary_operation | term;
binary_operation = term, binary_operator, term;
term = ['-'], (bracketed_expression | roll | number | function_call);
bracketed_expression = '(', expression, ')';
roll = [integer], ('d' | 'D'), integer;
integer = ['-'], digit, { digit };
digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
binary_operator = '*' | '/' | '+' | '-';
function_call = function_name, '(', function_arguments, ')';
function_name = 'min' | 'max' | 'repeat' | 'sum';
function_arguments = (expression | bracketed_sequence), {',' (expression | bracketed_sequence)};
bracketed_sequence = '(', S, ')';
